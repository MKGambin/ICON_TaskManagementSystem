// <auto-generated />
using CommonLibrary;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CommonLibrary.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250824131230_SeedInitialData")]
    partial class SeedInitialData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CommonLibrary.Models.TaskItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaskItemStatus")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TaskItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            Identifier = "86c53f64-6f9a-40c9-acce-766c8a88ae35",
                            Name = "Task 1.1",
                            TaskItemStatus = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Identifier = "e1d82661-3c50-4ba2-9c77-5521df64a6f8",
                            Name = "Task 1.2",
                            TaskItemStatus = 2,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            Identifier = "3311ff50-45f5-43a3-8a8b-0e9b6cbaf45f",
                            Name = "Task 1.3",
                            TaskItemStatus = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            Description = "Task 1.4 Cancelled..",
                            Identifier = "554fa5ed-5c60-4c01-985b-1292fcfd9cdd",
                            Name = "Task 1.4",
                            TaskItemStatus = 4,
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            Description = "Completed Before Time",
                            Identifier = "7e09726a-6037-432e-941e-80cf3fa93137",
                            Name = "Task A (001)",
                            TaskItemStatus = 3,
                            UserId = 2
                        },
                        new
                        {
                            Id = 6,
                            Description = "",
                            Identifier = "687f5642-57db-4bdf-a8cf-12c7d441c7b7",
                            Name = "Task B (001)",
                            TaskItemStatus = 4,
                            UserId = 2
                        },
                        new
                        {
                            Id = 7,
                            Description = "",
                            Identifier = "19ae216c-fbb7-4c56-b6da-aab9bbb58830",
                            Name = "Task B (002)",
                            TaskItemStatus = 4,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("CommonLibrary.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "alice.borderland@testmail.com",
                            Identifier = "f47ac10b-58cc-4372-a567-0e02b2c3d479"
                        },
                        new
                        {
                            Id = 2,
                            Email = "frodo.smith@testmail.com",
                            Identifier = "c9bf9e57-1685-4c89-bafb-ff5af830be8a"
                        },
                        new
                        {
                            Id = 3,
                            Email = "charlie.shane@testmail.com",
                            Identifier = "7c9e6679-7425-40de-944b-e07fc1f90ae7"
                        });
                });

            modelBuilder.Entity("CommonLibrary.Models.TaskItem", b =>
                {
                    b.HasOne("CommonLibrary.Models.User", "User")
                        .WithMany("TaskItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CommonLibrary.Models.User", b =>
                {
                    b.Navigation("TaskItems");
                });
#pragma warning restore 612, 618
        }
    }
}
